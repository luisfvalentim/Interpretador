using System;
using System.Collections.Generic;
using Interpretador.Generated;

namespace Interpretador.Interpreter
{
    public class InterpreterVisitor : CSubsetBaseVisitor<object>
    {
        private readonly Dictionary<string, object> _variables = new(); // Tabela de s√≠mbolos

        // üìå Tratamento de Declara√ß√µes de Vari√°veis
        public override object VisitDeclaration(CSubsetParser.DeclarationContext context)
        {
            string id = context.ID().GetText();
            object value = 0; // Define um valor padr√£o (int = 0, float = 0.0)

            if (context.expression() != null)
            {
                value = Visit(context.expression());
            }

            Console.WriteLine($"üîπ Declarando vari√°vel: {id} = {value}");
            _variables[id] = value; // Armazena na tabela de s√≠mbolos

            return null;
        }

        // üìå Tratamento de Express√µes Prim√°rias (ID, n√∫meros, strings)
        public override object VisitPrimary(CSubsetParser.PrimaryContext context)
        {
            if (context.ID() != null)
            {
                string varName = context.ID().GetText();

                if (_variables.ContainsKey(varName))
                {
                    Console.WriteLine($"üîπ Vari√°vel encontrada: {varName} = {_variables[varName]}");
                    return _variables[varName]; // Retorna o valor armazenado
                }
                else
                {
                    throw new Exception($"‚ùå Erro: Vari√°vel '{varName}' n√£o foi declarada antes do uso.");
                }
            }
            else if (context.NUMBER() != null)
            {
                return int.Parse(context.NUMBER().GetText()); // Converte n√∫meros inteiros
            }
            else if (context.STRING() != null)
            {
                return context.STRING().GetText().Trim('"'); // Remove aspas de strings
            }
            else if (context.expression() != null)
            {
                return Visit(context.expression()); // Avalia express√µes dentro de par√™nteses
            }

            throw new Exception("‚ùå Erro: Express√£o prim√°ria inv√°lida.");
        }

        // üìå Tratamento de Express√µes Relacionais (>, <, >=, etc.)
        public override object VisitRelationalExpression(CSubsetParser.RelationalExpressionContext context)
        {
            var left = Visit(context.additiveExpression(0));
            var right = Visit(context.additiveExpression(1));

            Console.WriteLine($"üîç Visitando Express√£o Relacional: {context.GetText()}");
            Console.WriteLine($"   ‚û§ Left: {left?.ToString() ?? "null"}, Right: {right?.ToString() ?? "null"}");

            if (left == null || right == null)
            {
                throw new Exception($"‚ùå Erro: Um dos operandos da express√£o relacional √© nulo. Left: {left}, Right: {right}");
            }

            if (left is int leftInt && right is int rightInt)
            {
                switch (context.GetChild(1).GetText())
                {
                    case "<": return leftInt < rightInt;
                    case ">": return leftInt > rightInt;
                    case "<=": return leftInt <= rightInt;
                    case ">=": return leftInt >= rightInt;
                    case "==": return leftInt == rightInt;
                    case "!=": return leftInt != rightInt;
                }
            }
            else if (left is float leftFloat && right is float rightFloat)
            {
                switch (context.GetChild(1).GetText())
                {
                    case "<": return leftFloat < rightFloat;
                    case ">": return leftFloat > rightFloat;
                    case "<=": return leftFloat <= rightFloat;
                    case ">=": return leftFloat >= rightFloat;
                    case "==": return leftFloat == rightFloat;
                    case "!=": return leftFloat != rightFloat;
                }
            }

            throw new Exception($"‚ùå Erro: Express√£o relacional inv√°lida. Tipos inesperados {left?.GetType()} e {right?.GetType()}");
        }

        // üìå Tratamento da Estrutura Condicional 'if'
        public override object VisitIfStatement(CSubsetParser.IfStatementContext context)
        {
            Console.WriteLine("üîç Visitando IfStatement");

            if (context == null)
            {
                Console.WriteLine("‚ùå Erro: contexto nulo.");
                return null;
            }

            Console.WriteLine($"   ‚û§ Express√£o condicional: {context.expression().GetText()}");

            var condition = Visit(context.expression());

            Console.WriteLine($"   ‚û§ Condi√ß√£o avaliada como: {condition}");

            if (condition is bool cond)
            {
                Console.WriteLine($"   ‚û§ Condi√ß√£o √© booleana: {cond}");

                if (cond)
                {
                    Console.WriteLine("   ‚úÖ Executando bloco if");
                    return Visit(context.statement(0));
                }
                else if (context.statement(1) != null)
                {
                    Console.WriteLine("   ‚úÖ Executando bloco else");
                    return Visit(context.statement(1));
                }
            }
            else
            {
                Console.WriteLine($"‚ùå Erro: A condi√ß√£o n√£o √© booleana. Tipo recebido: {condition?.GetType()}");
            }

            return null;
        }

        // üìå Tratamento de Chamadas de Fun√ß√£o (exemplo: printf)
        public override object VisitFunctionCall(CSubsetParser.FunctionCallContext context)
        {
            if (context.ID().GetText() == "printf")
            {
                string text = Visit(context.expression(0)).ToString();
                Console.WriteLine(text.Replace("\"", "")); // Remove aspas
            }
            return null;
        }
    }
}
