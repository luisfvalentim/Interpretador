//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/CSubset.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interpretador.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSubsetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, ID=48, NUMBER=49, CHAR=50, STRING=51, WS=52, COMMENT=53, 
		BLOCK_COMMENT=54;
	public const int
		RULE_program = 0, RULE_preprocessorDirective = 1, RULE_statement = 2, 
		RULE_whileStatement = 3, RULE_forStatement = 4, RULE_doWhileStatement = 5, 
		RULE_switchStatement = 6, RULE_caseStatement = 7, RULE_defaultStatement = 8, 
		RULE_ifStatement = 9, RULE_block = 10, RULE_logicalExpression = 11, RULE_equalityExpression = 12, 
		RULE_relationalExpression = 13, RULE_additiveExpression = 14, RULE_multiplicativeExpression = 15, 
		RULE_unaryExpression = 16, RULE_primary = 17, RULE_structDeclaration = 18, 
		RULE_structMember = 19, RULE_unionDeclaration = 20, RULE_structInstance = 21, 
		RULE_unionInstance = 22, RULE_expression = 23, RULE_functionCall = 24, 
		RULE_type = 25, RULE_returnStatement = 26, RULE_function = 27, RULE_parameters = 28, 
		RULE_declaration = 29, RULE_assignmentExpression = 30, RULE_breakStatement = 31;
	public static readonly string[] ruleNames = {
		"program", "preprocessorDirective", "statement", "whileStatement", "forStatement", 
		"doWhileStatement", "switchStatement", "caseStatement", "defaultStatement", 
		"ifStatement", "block", "logicalExpression", "equalityExpression", "relationalExpression", 
		"additiveExpression", "multiplicativeExpression", "unaryExpression", "primary", 
		"structDeclaration", "structMember", "unionDeclaration", "structInstance", 
		"unionInstance", "expression", "functionCall", "type", "returnStatement", 
		"function", "parameters", "declaration", "assignmentExpression", "breakStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'include'", "'<'", "'.'", "'>'", "'define'", "'error'", 
		"';'", "'while'", "'('", "')'", "'for'", "'do'", "'switch'", "'{'", "'}'", 
		"'case'", "':'", "'default'", "'if'", "'else'", "'&&'", "'||'", "'!'", 
		"'=='", "'!='", "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'", "'['", 
		"']'", "'struct'", "'union'", "'='", "'->'", "','", "'int'", "'float'", 
		"'char'", "'string'", "'void'", "'return'", "'break'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"ID", "NUMBER", "CHAR", "STRING", "WS", "COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSubset.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSubsetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSubsetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSubsetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CSubsetParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDirectiveContext[] preprocessorDirective() {
			return GetRuleContexts<PreprocessorDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDirectiveContext preprocessorDirective(int i) {
			return GetRuleContext<PreprocessorDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 64;
				preprocessorDirective();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 560957089673728L) != 0)) {
				{
				State = 72;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 70;
					statement();
					}
					break;
				case 2:
					{
					State = 71;
					functionCall();
					}
					break;
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CSubsetParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CSubsetParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSubsetParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDirectiveContext preprocessorDirective() {
		PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_preprocessorDirective);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				Match(T__0);
				State = 80;
				Match(T__1);
				State = 87;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 81;
					Match(T__2);
					State = 82;
					Match(ID);
					State = 83;
					Match(T__3);
					State = 84;
					Match(ID);
					State = 85;
					Match(T__4);
					}
					break;
				case STRING:
					{
					State = 86;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				Match(T__0);
				State = 90;
				Match(T__5);
				State = 91;
				Match(ID);
				State = 92;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				Match(T__0);
				State = 94;
				Match(T__6);
				State = 95;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionDeclarationContext unionDeclaration() {
			return GetRuleContext<UnionDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				assignmentExpression();
				State = 100;
				Match(T__7);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				functionCall();
				State = 103;
				Match(T__7);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 105;
				returnStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106;
				breakStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 107;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 108;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 109;
				forStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 110;
				doWhileStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 111;
				switchStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 112;
				function();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 113;
				structDeclaration();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 114;
				unionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__8);
			State = 118;
			Match(T__9);
			State = 119;
			expression(0);
			State = 120;
			Match(T__10);
			State = 121;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__11);
			State = 124;
			Match(T__9);
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
			case T__36:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
				{
				State = 125;
				declaration();
				}
				break;
			case ID:
				{
				State = 126;
				assignmentExpression();
				}
				break;
			case T__7:
				break;
			default:
				break;
			}
			State = 129;
			Match(T__7);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4222124667438080L) != 0)) {
				{
				State = 130;
				expression(0);
				}
			}

			State = 133;
			Match(T__7);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 134;
				assignmentExpression();
				}
			}

			State = 137;
			Match(T__10);
			State = 138;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__12);
			State = 141;
			block();
			State = 142;
			Match(T__8);
			State = 143;
			Match(T__9);
			State = 144;
			expression(0);
			State = 145;
			Match(T__10);
			State = 146;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultStatementContext defaultStatement() {
			return GetRuleContext<DefaultStatementContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(T__13);
			State = 149;
			Match(T__9);
			State = 150;
			expression(0);
			State = 151;
			Match(T__10);
			State = 152;
			Match(T__14);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 153;
				caseStatement();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 159;
				defaultStatement();
				}
			}

			State = 162;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(T__16);
			State = 165;
			expression(0);
			State = 166;
			Match(T__17);
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 167;
					statement();
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__46) {
				{
				State = 173;
				breakStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public DefaultStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitDefaultStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultStatementContext defaultStatement() {
		DefaultStatementContext _localctx = new DefaultStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_defaultStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(T__18);
			State = 177;
			Match(T__17);
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					statement();
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__46) {
				{
				State = 184;
				breakStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__19);
			State = 188;
			Match(T__9);
			State = 189;
			expression(0);
			State = 190;
			Match(T__10);
			State = 191;
			block();
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 192;
					Match(T__20);
					State = 193;
					Match(T__19);
					State = 194;
					Match(T__9);
					State = 195;
					expression(0);
					State = 196;
					Match(T__10);
					State = 197;
					block();
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 204;
				Match(T__20);
				State = 205;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(T__14);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 560957089673728L) != 0)) {
				{
				{
				State = 209;
				statement();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 215;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		return logicalExpression(0);
	}

	private LogicalExpressionContext logicalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, _parentState);
		LogicalExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_logicalExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case ID:
			case NUMBER:
			case CHAR:
			case STRING:
				{
				State = 218;
				equalityExpression(0);
				}
				break;
			case T__23:
				{
				State = 219;
				Match(T__23);
				State = 220;
				logicalExpression(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalExpression);
					State = 223;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 224;
					_la = TokenStream.LA(1);
					if ( !(_la==T__21 || _la==T__22) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 225;
					equalityExpression(0);
					}
					} 
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_equalityExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 232;
			relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualityExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
					State = 234;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 235;
					_la = TokenStream.LA(1);
					if ( !(_la==T__24 || _la==T__25) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 236;
					relationalExpression(0);
					}
					} 
				}
				State = 241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_relationalExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 243;
			additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
					State = 245;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 246;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 402653224L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 247;
					additiveExpression(0);
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_additiveExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 254;
			multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
					State = 256;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 257;
					_la = TokenStream.LA(1);
					if ( !(_la==T__28 || _la==T__29) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 258;
					multiplicativeExpression(0);
					}
					} 
				}
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_multiplicativeExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 265;
			primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
					State = 267;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 268;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385536L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 269;
					primary();
					}
					} 
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_unaryExpression);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				Match(T__23);
				State = 276;
				unaryExpression();
				}
				break;
			case T__9:
			case ID:
			case NUMBER:
			case CHAR:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CSubsetParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CSubsetParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(CSubsetParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructInstanceContext structInstance() {
			return GetRuleContext<StructInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionInstanceContext unionInstance() {
			return GetRuleContext<UnionInstanceContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 34, RULE_primary);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				Match(ID);
				State = 286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 282;
					Match(T__33);
					State = 283;
					expression(0);
					State = 284;
					Match(T__34);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288;
				Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 289;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 290;
				Match(CHAR);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 291;
				structInstance();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 292;
				unionInstance();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 293;
				Match(T__9);
				State = 294;
				expression(0);
				State = 295;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(T__35);
			State = 300;
			Match(ID);
			State = 301;
			Match(T__14);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68375879352320L) != 0)) {
				{
				{
				State = 302;
				structMember();
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 308;
			Match(T__15);
			State = 309;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterStructMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitStructMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 38, RULE_structMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			type();
			State = 312;
			Match(ID);
			State = 313;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		public UnionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterUnionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitUnionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionDeclarationContext unionDeclaration() {
		UnionDeclarationContext _localctx = new UnionDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_unionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(T__36);
			State = 316;
			Match(ID);
			State = 317;
			Match(T__14);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68375879352320L) != 0)) {
				{
				{
				State = 318;
				structMember();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 324;
			Match(T__15);
			State = 325;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CSubsetParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CSubsetParser.ID, i);
		}
		public StructInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterStructInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitStructInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructInstanceContext structInstance() {
		StructInstanceContext _localctx = new StructInstanceContext(Context, State);
		EnterRule(_localctx, 42, RULE_structInstance);
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				Match(ID);
				State = 328;
				Match(ID);
				State = 329;
				Match(T__7);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				Match(ID);
				State = 331;
				Match(ID);
				State = 332;
				Match(T__37);
				State = 333;
				Match(ID);
				State = 334;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CSubsetParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CSubsetParser.ID, i);
		}
		public UnionInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterUnionInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitUnionInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionInstanceContext unionInstance() {
		UnionInstanceContext _localctx = new UnionInstanceContext(Context, State);
		EnterRule(_localctx, 44, RULE_unionInstance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(ID);
			State = 338;
			Match(T__3);
			State = 339;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInstanceContext structInstance() {
			return GetRuleContext<StructInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionInstanceContext unionInstance() {
			return GetRuleContext<UnionInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 342;
				logicalExpression(0);
				}
				break;
			case 2:
				{
				State = 343;
				structInstance();
				}
				break;
			case 3:
				{
				State = 344;
				unionInstance();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 352;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 347;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 348;
					Match(T__38);
					State = 349;
					Match(ID);
					}
					} 
				}
				State = 354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(ID);
			State = 356;
			Match(T__9);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4222124667438080L) != 0)) {
				{
				State = 357;
				expression(0);
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__39) {
					{
					{
					State = 358;
					Match(T__39);
					State = 359;
					expression(0);
					}
					}
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 367;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 68375879352320L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(T__45);
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4222124667438080L) != 0)) {
				{
				State = 372;
				expression(0);
				}
			}

			State = 375;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 54, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			type();
			State = 378;
			Match(ID);
			State = 379;
			Match(T__9);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68375879352320L) != 0)) {
				{
				State = 380;
				parameters();
				}
			}

			State = 383;
			Match(T__10);
			State = 384;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CSubsetParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CSubsetParser.ID, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			type();
			State = 387;
			Match(ID);
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__39) {
				{
				{
				State = 388;
				Match(T__39);
				State = 389;
				type();
				State = 390;
				Match(ID);
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CSubsetParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			type();
			State = 398;
			Match(ID);
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 399;
				Match(T__33);
				State = 400;
				Match(NUMBER);
				State = 401;
				Match(T__34);
				}
			}

			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__37) {
				{
				State = 404;
				Match(T__37);
				State = 405;
				expression(0);
				}
			}

			State = 408;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CSubsetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(ID);
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 411;
				Match(T__33);
				State = 412;
				expression(0);
				State = 413;
				Match(T__34);
				}
			}

			State = 417;
			Match(T__37);
			State = 418;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSubsetListener typedListener = listener as ICSubsetListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSubsetVisitor<TResult> typedVisitor = visitor as ICSubsetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(T__46);
			State = 421;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return logicalExpression_sempred((LogicalExpressionContext)_localctx, predIndex);
		case 12: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 13: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 14: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 15: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 23: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicalExpression_sempred(LogicalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,424,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,1,0,
		5,0,73,8,0,10,0,12,0,76,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
		1,88,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,97,8,1,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,116,8,2,1,3,1,3,1,3,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,128,8,4,1,4,1,4,3,4,132,8,4,1,4,1,4,3,
		4,136,8,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,6,1,6,5,6,155,8,6,10,6,12,6,158,9,6,1,6,3,6,161,8,6,1,6,1,6,1,7,1,7,
		1,7,1,7,5,7,169,8,7,10,7,12,7,172,9,7,1,7,3,7,175,8,7,1,8,1,8,1,8,5,8,
		180,8,8,10,8,12,8,183,9,8,1,8,3,8,186,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,5,9,200,8,9,10,9,12,9,203,9,9,1,9,1,9,3,9,207,8,9,
		1,10,1,10,5,10,211,8,10,10,10,12,10,214,9,10,1,10,1,10,1,11,1,11,1,11,
		1,11,3,11,222,8,11,1,11,1,11,1,11,5,11,227,8,11,10,11,12,11,230,9,11,1,
		12,1,12,1,12,1,12,1,12,1,12,5,12,238,8,12,10,12,12,12,241,9,12,1,13,1,
		13,1,13,1,13,1,13,1,13,5,13,249,8,13,10,13,12,13,252,9,13,1,14,1,14,1,
		14,1,14,1,14,1,14,5,14,260,8,14,10,14,12,14,263,9,14,1,15,1,15,1,15,1,
		15,1,15,1,15,5,15,271,8,15,10,15,12,15,274,9,15,1,16,1,16,1,16,3,16,279,
		8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,287,8,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,3,17,298,8,17,1,18,1,18,1,18,1,18,5,18,304,8,18,
		10,18,12,18,307,9,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
		1,20,5,20,320,8,20,10,20,12,20,323,9,20,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,3,21,336,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,
		23,1,23,3,23,346,8,23,1,23,1,23,1,23,5,23,351,8,23,10,23,12,23,354,9,23,
		1,24,1,24,1,24,1,24,1,24,5,24,361,8,24,10,24,12,24,364,9,24,3,24,366,8,
		24,1,24,1,24,1,25,1,25,1,26,1,26,3,26,374,8,26,1,26,1,26,1,27,1,27,1,27,
		1,27,3,27,382,8,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,393,
		8,28,10,28,12,28,396,9,28,1,29,1,29,1,29,1,29,1,29,3,29,403,8,29,1,29,
		1,29,3,29,407,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,416,8,30,1,
		30,1,30,1,30,1,31,1,31,1,31,1,31,0,6,22,24,26,28,30,46,32,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,0,6,1,0,22,23,1,0,25,26,3,0,3,3,5,5,27,28,1,0,29,30,1,0,31,33,2,
		0,36,37,41,45,451,0,67,1,0,0,0,2,96,1,0,0,0,4,115,1,0,0,0,6,117,1,0,0,
		0,8,123,1,0,0,0,10,140,1,0,0,0,12,148,1,0,0,0,14,164,1,0,0,0,16,176,1,
		0,0,0,18,187,1,0,0,0,20,208,1,0,0,0,22,221,1,0,0,0,24,231,1,0,0,0,26,242,
		1,0,0,0,28,253,1,0,0,0,30,264,1,0,0,0,32,278,1,0,0,0,34,297,1,0,0,0,36,
		299,1,0,0,0,38,311,1,0,0,0,40,315,1,0,0,0,42,335,1,0,0,0,44,337,1,0,0,
		0,46,345,1,0,0,0,48,355,1,0,0,0,50,369,1,0,0,0,52,371,1,0,0,0,54,377,1,
		0,0,0,56,386,1,0,0,0,58,397,1,0,0,0,60,410,1,0,0,0,62,420,1,0,0,0,64,66,
		3,2,1,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,74,
		1,0,0,0,69,67,1,0,0,0,70,73,3,4,2,0,71,73,3,48,24,0,72,70,1,0,0,0,72,71,
		1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,74,
		1,0,0,0,77,78,5,0,0,1,78,1,1,0,0,0,79,80,5,1,0,0,80,87,5,2,0,0,81,82,5,
		3,0,0,82,83,5,48,0,0,83,84,5,4,0,0,84,85,5,48,0,0,85,88,5,5,0,0,86,88,
		5,51,0,0,87,81,1,0,0,0,87,86,1,0,0,0,88,97,1,0,0,0,89,90,5,1,0,0,90,91,
		5,6,0,0,91,92,5,48,0,0,92,97,3,46,23,0,93,94,5,1,0,0,94,95,5,7,0,0,95,
		97,5,51,0,0,96,79,1,0,0,0,96,89,1,0,0,0,96,93,1,0,0,0,97,3,1,0,0,0,98,
		116,3,58,29,0,99,100,3,60,30,0,100,101,5,8,0,0,101,116,1,0,0,0,102,103,
		3,48,24,0,103,104,5,8,0,0,104,116,1,0,0,0,105,116,3,52,26,0,106,116,3,
		62,31,0,107,116,3,18,9,0,108,116,3,6,3,0,109,116,3,8,4,0,110,116,3,10,
		5,0,111,116,3,12,6,0,112,116,3,54,27,0,113,116,3,36,18,0,114,116,3,40,
		20,0,115,98,1,0,0,0,115,99,1,0,0,0,115,102,1,0,0,0,115,105,1,0,0,0,115,
		106,1,0,0,0,115,107,1,0,0,0,115,108,1,0,0,0,115,109,1,0,0,0,115,110,1,
		0,0,0,115,111,1,0,0,0,115,112,1,0,0,0,115,113,1,0,0,0,115,114,1,0,0,0,
		116,5,1,0,0,0,117,118,5,9,0,0,118,119,5,10,0,0,119,120,3,46,23,0,120,121,
		5,11,0,0,121,122,3,20,10,0,122,7,1,0,0,0,123,124,5,12,0,0,124,127,5,10,
		0,0,125,128,3,58,29,0,126,128,3,60,30,0,127,125,1,0,0,0,127,126,1,0,0,
		0,127,128,1,0,0,0,128,129,1,0,0,0,129,131,5,8,0,0,130,132,3,46,23,0,131,
		130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,135,5,8,0,0,134,136,3,
		60,30,0,135,134,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,5,11,0,
		0,138,139,3,20,10,0,139,9,1,0,0,0,140,141,5,13,0,0,141,142,3,20,10,0,142,
		143,5,9,0,0,143,144,5,10,0,0,144,145,3,46,23,0,145,146,5,11,0,0,146,147,
		5,8,0,0,147,11,1,0,0,0,148,149,5,14,0,0,149,150,5,10,0,0,150,151,3,46,
		23,0,151,152,5,11,0,0,152,156,5,15,0,0,153,155,3,14,7,0,154,153,1,0,0,
		0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,160,1,0,0,0,158,
		156,1,0,0,0,159,161,3,16,8,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,
		0,0,0,162,163,5,16,0,0,163,13,1,0,0,0,164,165,5,17,0,0,165,166,3,46,23,
		0,166,170,5,18,0,0,167,169,3,4,2,0,168,167,1,0,0,0,169,172,1,0,0,0,170,
		168,1,0,0,0,170,171,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,173,175,3,
		62,31,0,174,173,1,0,0,0,174,175,1,0,0,0,175,15,1,0,0,0,176,177,5,19,0,
		0,177,181,5,18,0,0,178,180,3,4,2,0,179,178,1,0,0,0,180,183,1,0,0,0,181,
		179,1,0,0,0,181,182,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,184,186,3,
		62,31,0,185,184,1,0,0,0,185,186,1,0,0,0,186,17,1,0,0,0,187,188,5,20,0,
		0,188,189,5,10,0,0,189,190,3,46,23,0,190,191,5,11,0,0,191,201,3,20,10,
		0,192,193,5,21,0,0,193,194,5,20,0,0,194,195,5,10,0,0,195,196,3,46,23,0,
		196,197,5,11,0,0,197,198,3,20,10,0,198,200,1,0,0,0,199,192,1,0,0,0,200,
		203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,206,1,0,0,0,203,201,1,
		0,0,0,204,205,5,21,0,0,205,207,3,20,10,0,206,204,1,0,0,0,206,207,1,0,0,
		0,207,19,1,0,0,0,208,212,5,15,0,0,209,211,3,4,2,0,210,209,1,0,0,0,211,
		214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,
		0,0,0,215,216,5,16,0,0,216,21,1,0,0,0,217,218,6,11,-1,0,218,222,3,24,12,
		0,219,220,5,24,0,0,220,222,3,22,11,1,221,217,1,0,0,0,221,219,1,0,0,0,222,
		228,1,0,0,0,223,224,10,2,0,0,224,225,7,0,0,0,225,227,3,24,12,0,226,223,
		1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,23,1,0,0,0,
		230,228,1,0,0,0,231,232,6,12,-1,0,232,233,3,26,13,0,233,239,1,0,0,0,234,
		235,10,1,0,0,235,236,7,1,0,0,236,238,3,26,13,0,237,234,1,0,0,0,238,241,
		1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,25,1,0,0,0,241,239,1,0,0,0,
		242,243,6,13,-1,0,243,244,3,28,14,0,244,250,1,0,0,0,245,246,10,1,0,0,246,
		247,7,2,0,0,247,249,3,28,14,0,248,245,1,0,0,0,249,252,1,0,0,0,250,248,
		1,0,0,0,250,251,1,0,0,0,251,27,1,0,0,0,252,250,1,0,0,0,253,254,6,14,-1,
		0,254,255,3,30,15,0,255,261,1,0,0,0,256,257,10,1,0,0,257,258,7,3,0,0,258,
		260,3,30,15,0,259,256,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,
		1,0,0,0,262,29,1,0,0,0,263,261,1,0,0,0,264,265,6,15,-1,0,265,266,3,34,
		17,0,266,272,1,0,0,0,267,268,10,1,0,0,268,269,7,4,0,0,269,271,3,34,17,
		0,270,267,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,
		31,1,0,0,0,274,272,1,0,0,0,275,276,5,24,0,0,276,279,3,32,16,0,277,279,
		3,34,17,0,278,275,1,0,0,0,278,277,1,0,0,0,279,33,1,0,0,0,280,298,5,49,
		0,0,281,286,5,48,0,0,282,283,5,34,0,0,283,284,3,46,23,0,284,285,5,35,0,
		0,285,287,1,0,0,0,286,282,1,0,0,0,286,287,1,0,0,0,287,298,1,0,0,0,288,
		298,5,51,0,0,289,298,3,48,24,0,290,298,5,50,0,0,291,298,3,42,21,0,292,
		298,3,44,22,0,293,294,5,10,0,0,294,295,3,46,23,0,295,296,5,11,0,0,296,
		298,1,0,0,0,297,280,1,0,0,0,297,281,1,0,0,0,297,288,1,0,0,0,297,289,1,
		0,0,0,297,290,1,0,0,0,297,291,1,0,0,0,297,292,1,0,0,0,297,293,1,0,0,0,
		298,35,1,0,0,0,299,300,5,36,0,0,300,301,5,48,0,0,301,305,5,15,0,0,302,
		304,3,38,19,0,303,302,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,
		1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,309,5,16,0,0,309,310,5,8,0,
		0,310,37,1,0,0,0,311,312,3,50,25,0,312,313,5,48,0,0,313,314,5,8,0,0,314,
		39,1,0,0,0,315,316,5,37,0,0,316,317,5,48,0,0,317,321,5,15,0,0,318,320,
		3,38,19,0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,
		0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,5,16,0,0,325,326,5,8,0,0,326,
		41,1,0,0,0,327,328,5,48,0,0,328,329,5,48,0,0,329,336,5,8,0,0,330,331,5,
		48,0,0,331,332,5,48,0,0,332,333,5,38,0,0,333,334,5,48,0,0,334,336,5,8,
		0,0,335,327,1,0,0,0,335,330,1,0,0,0,336,43,1,0,0,0,337,338,5,48,0,0,338,
		339,5,4,0,0,339,340,5,48,0,0,340,45,1,0,0,0,341,342,6,23,-1,0,342,346,
		3,22,11,0,343,346,3,42,21,0,344,346,3,44,22,0,345,341,1,0,0,0,345,343,
		1,0,0,0,345,344,1,0,0,0,346,352,1,0,0,0,347,348,10,1,0,0,348,349,5,39,
		0,0,349,351,5,48,0,0,350,347,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,
		353,1,0,0,0,353,47,1,0,0,0,354,352,1,0,0,0,355,356,5,48,0,0,356,365,5,
		10,0,0,357,362,3,46,23,0,358,359,5,40,0,0,359,361,3,46,23,0,360,358,1,
		0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,366,1,0,0,0,
		364,362,1,0,0,0,365,357,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,368,
		5,11,0,0,368,49,1,0,0,0,369,370,7,5,0,0,370,51,1,0,0,0,371,373,5,46,0,
		0,372,374,3,46,23,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,
		376,5,8,0,0,376,53,1,0,0,0,377,378,3,50,25,0,378,379,5,48,0,0,379,381,
		5,10,0,0,380,382,3,56,28,0,381,380,1,0,0,0,381,382,1,0,0,0,382,383,1,0,
		0,0,383,384,5,11,0,0,384,385,3,20,10,0,385,55,1,0,0,0,386,387,3,50,25,
		0,387,394,5,48,0,0,388,389,5,40,0,0,389,390,3,50,25,0,390,391,5,48,0,0,
		391,393,1,0,0,0,392,388,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,
		1,0,0,0,395,57,1,0,0,0,396,394,1,0,0,0,397,398,3,50,25,0,398,402,5,48,
		0,0,399,400,5,34,0,0,400,401,5,49,0,0,401,403,5,35,0,0,402,399,1,0,0,0,
		402,403,1,0,0,0,403,406,1,0,0,0,404,405,5,38,0,0,405,407,3,46,23,0,406,
		404,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,5,8,0,0,409,59,1,0,
		0,0,410,415,5,48,0,0,411,412,5,34,0,0,412,413,3,46,23,0,413,414,5,35,0,
		0,414,416,1,0,0,0,415,411,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,
		418,5,38,0,0,418,419,3,46,23,0,419,61,1,0,0,0,420,421,5,47,0,0,421,422,
		5,8,0,0,422,63,1,0,0,0,40,67,72,74,87,96,115,127,131,135,156,160,170,174,
		181,185,201,206,212,221,228,239,250,261,272,278,286,297,305,321,335,345,
		352,362,365,373,381,394,402,406,415
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Interpretador.Generated
